function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=t():e.dcfLazyLoad=t()}(void 0,function(){return function(){function e(t,n,i){var o=this;_classCallCheck(this,e),this.onIntersection=function(e){0===o.imageCount&&o.observer.disconnect();for(var t=0;t<e.length;t++){var n=e[t];n.intersectionRatio>0&&(o.imageCount--,o.observer.unobserve(n.target),o.preloadImage(n.target))}},this.imagesList=t,this.observerConfig=n,this.classNames=i}return _createClass(e,[{key:"applyImage",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;e.classList.add("dcf-lazy-img-handled"),e.src=t,t&&e.removeAttribute("data-src"),n&&(e.srcset=n),n&&e.removeAttribute("data-srcset"),this.classNames.length&&this.classNames.forEach(function(t){return e.classList.add(t)})}},{key:"fetchImage",value:function(){var e=arguments;return new Promise(function(t,n){var i=new Image;e[0]&&(i.src=e[0]),e[1]&&(i.srcset=e[1]),i.onload=t,i.onerror=n})}},{key:"preloadImage",value:function(e){var t=this,n=e.dataset.src,i=e.dataset.srcset;if(n)return this.fetchImage(n,i).then(function(){t.applyImage(e,n,i)}).catch(function(e){return"Image failed to fetch "+e.mes})}},{key:"loadImagesImmediately",value:function(e){for(var t=0;t<e.length;t++){var n=e[t];this.preloadImage(n)}}},{key:"disconnect",value:function(){this.observer&&this.observer.disconnect()}},{key:"initialize",value:function(){if(this.imagesList)if(this.imageCount=this.imagesList.length,"IntersectionObserver"in window){this.observer=new IntersectionObserver(this.onIntersection,this.observerConfig);for(var e=0;e<this.imageCount;e++){var t=this.imagesList[e];t.classList.contains("dcf-lazy-img-loaded")||this.observer.observe(t)}}else this.loadImagesImmediately(this.imagesList)}}]),e}()});
//# sourceMappingURL=dcf-lazyLoad.js.map